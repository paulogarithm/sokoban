#!/bin/python3

import os
import os.path as path
import time
import subprocess


command = "./my_sokoban"

path_tests = "./tests"

path_tmp = f"{path_tests}/tmp.txt"
path_inv = f"{path_tests}/invalid_maps"
path_map = f"{path_tests}/map.txt"

class c:
    reset = "\033[m"
    bold = "\033[1m"
    under = "\033[4m"
    red = "\033[31m"
    blue = "\033[94m"
    green = "\033[92m"
    orange = "\033[33m"


def is_nb(text: str) -> int:
    try:
        return int(text)
    except ValueError:
        return -1


def create_bar(per: int) -> str:
    max_char = 20
    nb_char = int((per / 100) * 20)
    nb_space = max_char - nb_char

    ret = '=' * nb_char
    if nb_space == 0:
        return ret
    ret += '>'
    ret += ' ' * (nb_space - 1)
    return ret
    

def tell_results(message: str, results: list[bool]):
    top = len(results)
    cur = sum([1 if v else 0 for v in results])
    per = (cur / top) * 100
    color = c.green if per >= 66 else c.orange if per >= 33 else c.red
    bar = create_bar(per)
    percentage = str(int(per)) + "%"

    print(f"\n{message} {cur}/{top}")
    print(f"{percentage.ljust(4)} [{color}{bar}{c.reset}]\n")


def execute(command_to_do: str) -> int:
    text: str
    os.system(f"{command_to_do} || echo $? > {path_tmp}")
    with open(path_tmp, "r") as f:
        text = f.readline()
    return is_nb(text)


def check_command() -> bool:
    ret = execute(command)
    ret = False if ret < 0 or ret == 127 else True

    c1 = c.red if not ret else c.green
    c2 = c.reset if not ret else c.reset
    c3 = c.under if not ret else c.reset
    print(f"{c1}[MUST]{c2}\t{c3}Check if command exists{c.reset}")
    return ret


def check_maps() -> list[str]:
    ret = []
    files = [f for f in os.listdir(path_inv) if path.isfile(path.join(path_inv, f))]
    for path_file in files:
        res = execute(f"{command} {path_file}")
        sta = "S" if res == 84 else "F"
        col = c.green if res == 84 else c.red

        print("{}[{}]{}\t{}".format(col, sta, c.reset, path_file))
        ret.append(True if res == 84 else False)
    return ret


def check_stops() -> bool:
    sokoban = subprocess.Popen(
        ["./my_sokoban", path_map],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        universal_newlines=True
    )
    start_time = time.time()
    sokoban.stdin.write("q\n")
    sokoban.stdin.flush()
    return_code = None

    while return_code is None:
        return_code = sokoban.poll()
        if time.time() - start_time > 1:
            break
    
    c1 = c.green if return_code == 0 else c.red
    c2 = c.reset if return_code == 0 else c.reset
    c3 = c.reset if return_code == 0 else c.under
    print(f"{c1}[MUST]{c2}\t{c3}Press Q to quit{c.reset}")
    return return_code == 0


def check_making() -> bool:
    val1 = execute("make -s re")
    val2 = execute("make -s clean")
    val = 1 if val1 == val2 and val1 != 2 else 0
    c1 = c.green if val == 1 else c.red
    c2 = c.reset if val == 1 else c.reset
    c3 = c.reset if val == 1 else c.under
    print(f"{c1}[MUST]{c2}\t{c3}Make file{c.reset}")

    if val != 1:
        return False
    return True

if __name__ == "__main__":
    if not check_making():
        exit(69)
    if not check_command():
        exit(69)
    if not check_stops():
        exit(69)
    print()

    results = check_maps()
    tell_results("Checking Maps:", results)
